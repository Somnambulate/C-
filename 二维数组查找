问题：在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。


思路分析：
1.暴力求解可能会超出时间
2.每一行都是有序数组，利用二分查找，遍历每一行得到答案，时间复杂度为nlogn
3.利用数组规律，选择左下角（或者右上角）的元素和target进行比较，target大于元素a[row][col]时，右移；target小于元素a[row][col]时，上移
class Solution {
public:
    bool Find(int target, vector<vector<int> > array) {
        if(array.empty())
            return false;
        //选取右上角的元素
        int row=0;
        int col=array[0].size()-1;
        while(row<array.size()&&col>=0){
            if(target==array[row][col])
                return true;
            else if(target<array[row][col])
                col--;
            else
                row++;
        }
        return false;
    }
};

class Solution {
public:
    bool Find(int target, vector<vector<int> > array) {
        if(array.empty())
            return false;
        //选取左下角的元素
        int row=array.size()-1;
        int col=0;
        while(row>=0&&col<array[0].size()){
            if(target==array[row][col])
                return true;
            else if(target<array[row][col])
                row--;
            else
                col++;
        }
        return false;
    }
};
