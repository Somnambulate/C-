/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
题目描述:
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
class Solution {
public:
    TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
        if(pre.empty()||vin.empty())
              return NULL;
        vector<int>pre_left,pre_right,vin_left,vin_right;
        TreeNode *root=new TreeNode(pre[0]);          //创建根节点
        
        int gen=0;                                    //在中序遍历中找到根节点的位置
        for(int i=0;i<vin.size();i++){
            if(vin[i]==pre[0]){
                gen=i;
                break;
            }
        }
        for(int i=0;i<gen;i++){                     //先序遍历和中序遍历下的左子树
            pre_left.push_back(pre[i+1]);
            vin_left.push_back(vin[i]);
        }
        
        for(int i=gen+1;i<vin.size();i++){        //先序遍历和中序遍历下的右子树
            pre_right.push_back(pre[i]);
            vin_right.push_back(vin[i]);
        }
        //递归
        root->left=reConstructBinaryTree(pre_left,vin_left);
        root->right=reConstructBinaryTree(pre_right,vin_right);
        return root;
    }
};

//灵活使用迭代器
class Solution {
public:
    TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
        if(pre.empty())
            return NULL;
        int nodeval=pre[0];
        TreeNode *root=new TreeNode(nodeval);
        auto iter=find(vin.begin(),vin.end(),nodeval);
        int leftNum=iter-vin.begin();
        root->left = reConstructBinaryTree(vector<int>(pre.begin()+1,pre.begin()+1+leftNum),
                                            vector<int>(vin.begin(),vin.begin()+leftNum));
        root->right= reConstructBinaryTree(vector<int>(pre.begin()+1+leftNum,pre.end()),
                                            vector<int>(vin.begin()+leftNum+1,vin.end()));
        return root;
    }
};
